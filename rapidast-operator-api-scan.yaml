apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: rapidast-operator-api-scan
  annotations:
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    pipelinesascode.tekton.dev/on-cel-expression: |
      event == "push" && target_branch == "main"
spec:
  description: |
    DAST scan for Custom Metrics Autoscaler operator API groups using RapiDAST.
    This pipeline scans the operator's CRDs and API endpoints directly via the cluster API server.
  params:
  - name: SNAPSHOT
    type: string
    description: The JSON string of the Snapshot object containing components to test
  - name: NAMESPACE
    type: string
    default: "openshift-keda"
    description: Namespace where the operator will be installed
  - name: timeout
    type: string
    description: Timeout for the DAST scan
    default: "600"
  
  tasks:
  # Extract bundle image from snapshot
  - name: extract-bundle-image
    taskSpec:
      params:
        - name: SNAPSHOT
          type: string
      results:
        - name: bundle-image
          description: Bundle image extracted from snapshot
      steps:
        - name: extract-image
          image: quay.io/konflux-ci/konflux-test:latest
          env:
            - name: SNAPSHOT
              value: "$(params.SNAPSHOT)"
          script: |
            #!/bin/bash
            set -euxo pipefail
            echo "Extracting bundle image from snapshot..."
            BUNDLE_IMAGE=$(echo "$SNAPSHOT" | jq -r '(.spec.components[]? // .components[]?) | select(.name | test(".*bundle.*|.*operator.*bundle.*"; "i")) | .containerImage' | head -1)
            if [ -z "$BUNDLE_IMAGE" ] || [ "$BUNDLE_IMAGE" = "null" ]; then
              BUNDLE_IMAGE=$(echo "$SNAPSHOT" | jq -r '(.spec.components[]? // .components[]?) | select(.name == "custom-metrics-autoscaler-operator-bundle") | .containerImage')
            fi
            if [ -z "$BUNDLE_IMAGE" ] || [ "$BUNDLE_IMAGE" = "null" ]; then
              echo "ERROR: No bundle image found in snapshot"
              echo "Available components:"
              echo "$SNAPSHOT" | jq -r '(.spec.components[]? // .components[]?)?.name' | sed 's/^/  - /'
              exit 1
            fi
            echo "Found bundle image: $BUNDLE_IMAGE"
            echo -n "$BUNDLE_IMAGE" | tee "$(results.bundle-image.path)"
    params:
    - name: SNAPSHOT
      value: "$(params.SNAPSHOT)"

  # Provision EaaS space
  - name: provision-eaas-space
    taskRef:
      resolver: git
      params:
        - name: url
          value: https://github.com/konflux-ci/build-definitions.git
        - name: revision
          value: main
        - name: pathInRepo
          value: task/eaas-provision-space/0.1/eaas-provision-space.yaml
    params:
    - name: ownerName
      value: $(context.pipelineRun.name)
    - name: ownerUid
      value: $(context.pipelineRun.uid)

  # Create ephemeral cluster with image mirroring
  - name: provision-cluster
    runAfter:
    - provision-eaas-space
    timeout: "20m"  # Allow 20 minutes for cluster provisioning
    taskSpec:
      results:
      - name: clusterName
        value: "$(steps.create-cluster.results.clusterName)"
      steps:
      - name: get-supported-versions
        ref:
          resolver: git
          params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: stepactions/eaas-get-supported-ephemeral-cluster-versions/0.1/eaas-get-supported-ephemeral-cluster-versions.yaml
        params:
        - name: eaasSpaceSecretRef
          value: $(tasks.provision-eaas-space.results.secretRef)
      - name: pick-version
        ref:
          resolver: git
          params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: stepactions/eaas-get-latest-openshift-version-by-prefix/0.1/eaas-get-latest-openshift-version-by-prefix.yaml
        params:
        - name: prefix
          value: "$(steps.get-supported-versions.results.versions[0])."
      - name: create-cluster
        ref:
          resolver: git
          params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: stepactions/eaas-create-ephemeral-cluster-hypershift-aws/0.1/eaas-create-ephemeral-cluster-hypershift-aws.yaml
        params:
          - name: eaasSpaceSecretRef
            value: $(tasks.provision-eaas-space.results.secretRef)
          - name: version
            value: "$(steps.pick-version.results.version)"
          - name: imageContentSources
            value: |
              - mirrors:
                - registry.stage.redhat.io/custom-metrics-autoscaler/custom-metrics-autoscaler-operator-bundle
                - quay.io/redhat-user-workloads/cma-podauto-tenant/custom-metrics-autoscaler-operator-bundle
                - quay.io/redhat-user-workloads/cma-podauto-tenant/custom-metrics-autoscaler-operator/custom-metrics-autoscaler-operator-bundle
                source: registry.redhat.io/custom-metrics-autoscaler/custom-metrics-autoscaler-operator-bundle
              - mirrors:
                - registry.stage.redhat.io/custom-metrics-autoscaler/custom-metrics-autoscaler-adapter-rhel9
                - quay.io/redhat-user-workloads/cma-podauto-tenant/custom-metrics-autoscaler-operator/keda-adapter
                - quay.io/redhat-user-workloads/cma-podauto-tenant/keda-adapter
                source: registry.redhat.io/custom-metrics-autoscaler/custom-metrics-autoscaler-adapter-rhel9
              - mirrors:
                - registry.stage.redhat.io/custom-metrics-autoscaler/custom-metrics-autoscaler-admission-webhooks-rhel9
                - quay.io/redhat-user-workloads/cma-podauto-tenant/custom-metrics-autoscaler-operator/keda-webhooks
                - quay.io/redhat-user-workloads/cma-podauto-tenant/keda-webhooks
                source: registry.redhat.io/custom-metrics-autoscaler/custom-metrics-autoscaler-admission-webhooks-rhel9
              - mirrors:
                - registry.stage.redhat.io/custom-metrics-autoscaler/custom-metrics-autoscaler-rhel9-operator
                - quay.io/redhat-user-workloads/cma-podauto-tenant/custom-metrics-autoscaler-operator/custom-metrics-autoscaler-operator
                - quay.io/redhat-user-workloads/cma-podauto-tenant/custom-metrics-autoscaler-operator
                source: registry.redhat.io/custom-metrics-autoscaler/custom-metrics-autoscaler-rhel9-operator
              - mirrors:
                - registry.stage.redhat.io/custom-metrics-autoscaler/custom-metrics-autoscaler-rhel9
                - quay.io/redhat-user-workloads/cma-podauto-tenant/custom-metrics-autoscaler-operator/keda-operator
                - quay.io/redhat-user-workloads/cma-podauto-tenant/keda-operator
                source: registry.redhat.io/custom-metrics-autoscaler/custom-metrics-autoscaler-rhel9

  # Deploy the operator 
  - name: deploy-operator
    runAfter:
    - provision-cluster
    - extract-bundle-image
    timeout: "30m"  # Allow 30 minutes for operator deployment
    taskSpec:
      params:
      - name: bundle-image
        type: string
      - name: namespace
        type: string
      volumes:
      - name: credentials
        emptyDir: {}
      steps:
      - name: get-kubeconfig
        ref:
          resolver: git
          params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
        params:
        - name: eaasSpaceSecretRef
          value: $(tasks.provision-eaas-space.results.secretRef)
        - name: clusterName
          value: "$(tasks.provision-cluster.results.clusterName)"
        - name: credentials
          value: credentials
      - name: create-namespace
        image: quay.io/konflux-ci/konflux-test:latest
        env:
        - name: KUBECONFIG
          value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
        - name: NAMESPACE
          value: "$(params.namespace)"
        volumeMounts:
        - name: credentials
          mountPath: /credentials
        script: |
          #!/bin/bash
          set -euxo pipefail
          echo "Creating namespace: $NAMESPACE"
          oc create namespace "$NAMESPACE" --dry-run=client -o yaml | oc apply -f -
          echo "Namespace $NAMESPACE is ready"
      - name: deploy-operator
        image: quay.io/operator-framework/operator-sdk:latest
        env:
        - name: KUBECONFIG
          value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
        - name: BUNDLE_IMAGE
          value: "$(params.bundle-image)"
        - name: NAMESPACE
          value: "$(params.namespace)"
        volumeMounts:
        - name: credentials
          mountPath: /credentials
        script: |
          #!/bin/bash
          set -euxo pipefail
          echo "Deploying operator bundle: $BUNDLE_IMAGE"
          operator-sdk run bundle "$BUNDLE_IMAGE" --namespace "$NAMESPACE" --timeout 10m
          echo "Operator deployment completed successfully"
    params:
    - name: bundle-image
      value: "$(tasks.extract-bundle-image.results.bundle-image)"
    - name: namespace
      value: "$(params.NAMESPACE)"

  # Configure KEDA controller
  - name: configure-keda
    runAfter:
    - deploy-operator
    timeout: "15m"  # Allow 15 minutes for KEDA configuration
    taskSpec:
      params:
      - name: namespace
        type: string
      volumes:
      - name: credentials
        emptyDir: {}
      steps:
      - name: get-kubeconfig
        ref:
          resolver: git
          params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
        params:
        - name: eaasSpaceSecretRef
          value: $(tasks.provision-eaas-space.results.secretRef)
        - name: clusterName
          value: "$(tasks.provision-cluster.results.clusterName)"
        - name: credentials
          value: credentials
      - name: create-kedacontroller
        image: quay.io/konflux-ci/konflux-test:latest
        env:
        - name: KUBECONFIG
          value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
        - name: NAMESPACE
          value: "$(params.namespace)"
        volumeMounts:
        - name: credentials
          mountPath: /credentials
        script: |
          #!/bin/bash
          set -euxo pipefail
          
          echo "Creating KedaController instance..."
          oc apply -f - <<EOF
          apiVersion: keda.sh/v1alpha1
          kind: KedaController
          metadata:
            name: keda
            namespace: $NAMESPACE
          spec:
            metricsServer:
              logLevel: "0"
            operator:
              logEncoder: console
              logLevel: info
            serviceAccount: {}
            watchNamespace: ""
          EOF
          
          echo "Waiting for KEDA components to be ready..."
          timeout 300s bash -c "
            until [ \"\$(oc get deployment -n $NAMESPACE keda-metrics-apiserver -o jsonpath='{.status.conditions[?(@.type==\"Available\")].status}' 2>/dev/null)\" = \"True\" ]; do
              echo -n .
              sleep 5
            done
          "
          echo " KEDA metrics-apiserver ready"
          
          timeout 300s bash -c "
            until [ \"\$(oc get deployment -n $NAMESPACE keda-operator -o jsonpath='{.status.conditions[?(@.type==\"Available\")].status}' 2>/dev/null)\" = \"True\" ]; do
              echo -n .
              sleep 5
            done
          "
          echo " KEDA operator ready"
          
          echo "✅ KEDA controller is fully operational"
    params:
    - name: namespace
      value: "$(params.NAMESPACE)"

  # Run RapiDAST scan on the operator's API groups
  - name: rapidast-api-scan
    runAfter:
    - configure-keda
    timeout: "45m"  # Increase timeout to 45 minutes for DAST scanning
    taskSpec:
      params:
      - name: namespace
        type: string
      volumes:
      - name: credentials
        emptyDir: {}
      - name: rapidast-config
        emptyDir: {}
      - name: rapidast-results
        emptyDir: {}
      steps:
      - name: get-kubeconfig
        ref:
          resolver: git
          params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
        params:
        - name: eaasSpaceSecretRef
          value: $(tasks.provision-eaas-space.results.secretRef)
        - name: clusterName
          value: "$(tasks.provision-cluster.results.clusterName)"
        - name: credentials
          value: credentials
      - name: prepare-rapidast-config
        image: quay.io/konflux-ci/konflux-test:latest
        env:
        - name: KUBECONFIG
          value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
        - name: NAMESPACE
          value: "$(params.namespace)"
        volumeMounts:
        - name: credentials
          mountPath: /credentials
        - name: rapidast-config
          mountPath: /rapidast-config
        script: |
          #!/bin/bash
          set -euxo pipefail
          
          # Get cluster API server URL and kubeconfig info
          API_SERVER=$(oc whoami --show-server)
          KUBECONFIG_FILE=$(basename "$KUBECONFIG")
          echo "Cluster API server: $API_SERVER"
          echo "Using kubeconfig: $KUBECONFIG_FILE"
          
          # Create a service account and token for RapiDAST scanning
          echo "Creating service account for RapiDAST in namespace: $NAMESPACE"
          oc create serviceaccount rapidast-scanner -n $NAMESPACE --dry-run=client -o yaml | oc apply -f -
          
          # Create cluster-admin rolebinding for the service account
          oc create clusterrolebinding rapidast-scanner-admin-$(date +%s) \
            --clusterrole=cluster-admin \
            --serviceaccount=$NAMESPACE:rapidast-scanner \
            --dry-run=client -o yaml | oc apply -f -
          
          # Wait for the service account token to be created
          echo "Waiting for service account token..."
          for i in {1..30}; do
            BEARER_TOKEN=$(oc create token rapidast-scanner -n $NAMESPACE --duration=1h 2>/dev/null || echo "")
            if [ -n "$BEARER_TOKEN" ]; then
              break
            fi
            echo -n "."
            sleep 2
          done
          
          if [ -z "$BEARER_TOKEN" ]; then
            echo "❌ Failed to create service account token"
            echo "Trying to extract token from kubeconfig..."
            # Try to get token from current context (fallback)
            BEARER_TOKEN=$(oc whoami -t 2>/dev/null || echo "")
          fi
          
          if [ -n "$BEARER_TOKEN" ]; then
            echo "✅ Got bearer token (length: ${#BEARER_TOKEN})"
            
            # Wait for RBAC permissions to propagate
            echo "⏳ Waiting for RBAC permissions to propagate..."
            sleep 10
            
            # Test the token works with a basic API call
            echo "Testing token access..."
            if oc whoami --token="$BEARER_TOKEN" >/dev/null 2>&1; then
              echo "✅ Service account token is valid"
            else
              echo "⚠️ Service account token validation failed, but continuing..."
            fi
          else
            echo "❌ No bearer token available - this may cause RapiDAST authentication to fail"
            BEARER_TOKEN="PLACEHOLDER_TOKEN"
          fi
          
          # Create RapiDAST config from template
          cat > /rapidast-config/config.yaml << EOF
          config:
              configVersion: 4

          application:
            shortName: "cma-operator"
            url: "$API_SERVER"

          general:
              authentication:
                  type: "http_header"
                  parameters:
                      name: "Authorization"
                      value: "Bearer $BEARER_TOKEN"
              container:
                  type: "none"

          scanners:
              zap:
                  apiScan:
                      apis:
                          apiUrl: "$API_SERVER/openapi/v3/apis/keda.sh/v1alpha1"

                  passiveScan:
                      disabledRules: "2,10015,10024,10027,10054,10096,10109,10112"

                  activeScan:
                      policy: "Kubernetes-API-scan"

                  miscOptions:
                    enableUI: False
                    updateAddons: False
                    overrideConfigs:
                        - formhandler.fields.field(0).fieldId=namespace   
                        - formhandler.fields.field(0).value=$NAMESPACE
                        - formhandler.fields.field(1).fieldId=name   
                        - formhandler.fields.field(1).value=default

                  report:
                      format: ["json","html","sarif"]
                      
              generic_trivy:
                  # Scan Kubernetes workloads for misconfigurations in the operator namespace  
                  inline: "export KUBECONFIG=/credentials/$KUBECONFIG_FILE && echo 'Using kubeconfig: /credentials/$KUBECONFIG_FILE' && trivy k8s --include-namespaces $NAMESPACE --severity=HIGH,CRITICAL --scanners=misconfig --report all --format json --output /opt/rapidast/results/trivy-k8s-misconfig.json || echo 'Trivy scan completed with warnings'"
          EOF
          
          echo "✅ RapiDAST configuration prepared"
          echo "Scanning API endpoint: $API_SERVER/openapi/v3/apis/keda.sh/v1alpha1"
      - name: run-rapidast-scan
        image: quay.io/redhatproductsecurity/rapidast:latest
        env:
        - name: KUBECONFIG_FILE
          value: "$(steps.get-kubeconfig.results.kubeconfig)"  
        - name: NAMESPACE
          value: "$(params.namespace)"
        volumeMounts:
        - name: rapidast-config
          mountPath: /rapidast-config
        - name: rapidast-results
          mountPath: /opt/rapidast/results
        - name: credentials
          mountPath: /credentials
        script: |
          #!/bin/bash
          set -euxo pipefail
          
          echo "Starting RapiDAST scan of CMA operator APIs..."
          echo "Config file:"
          cat /rapidast-config/config.yaml
          echo "================================"
          
          # Debug: Test API endpoint accessibility
          API_SERVER=$(grep -E 'url:|apiUrl:' /rapidast-config/config.yaml | head -1 | sed 's/.*: *"//' | sed 's/".*//' | sed 's/ *$//')
          OPENAPI_URL=$(grep 'apiUrl:' /rapidast-config/config.yaml | sed 's/.*apiUrl: *"//' | sed 's/".*//')
          
          echo "🔍 Debug: Testing API endpoint accessibility..."
          echo "API Server: $API_SERVER"
          echo "OpenAPI URL: $OPENAPI_URL"
          
          # Test if the API server is reachable
          if curl -k -s --connect-timeout 10 "$API_SERVER" >/dev/null; then
            echo "✅ API server is reachable"
          else
            echo "❌ API server is not reachable"
          fi
          
          # Test token permissions first
          echo "🔍 Testing service account token permissions..."
          # Extract token without the "Bearer " prefix since we'll add it
          TOKEN=$(grep -A5 'authentication:' /rapidast-config/config.yaml | grep 'value:' | sed 's/.*value: *"Bearer *//' | sed 's/".*//')
          echo "Testing with token (length: ${#TOKEN})"
          
          # Test basic cluster access
          echo "Testing basic cluster access..."
          if curl -k -s --connect-timeout 10 -H "Authorization: Bearer $TOKEN" "$API_SERVER/api/v1/namespaces" | grep -q '"kind":"NamespaceList"' 2>/dev/null; then
            echo "✅ Service account has basic cluster access"
          else
            echo "❌ Service account lacks basic cluster access"
          fi
          
          echo "🎯 CHECKPOINT 1: Basic authentication working"
          
          # Test if the OpenAPI endpoint returns content
          echo "Testing OpenAPI endpoint..."
          if curl -k -s --connect-timeout 10 -H "Authorization: Bearer $TOKEN" "$OPENAPI_URL" | grep -q '"openapi"' 2>/dev/null; then
            echo "✅ OpenAPI endpoint returned valid content"
          elif curl -k -s --connect-timeout 10 -H "Authorization: Bearer $TOKEN" "$OPENAPI_URL" | grep -q '"kind":"Status"' 2>/dev/null; then
            echo "❌ OpenAPI endpoint returned error (likely API not available yet)"
          else
            echo "❌ OpenAPI endpoint not accessible"
          fi
          echo ""
          
          echo "🎯 CHECKPOINT 2: OpenAPI endpoint tested"
          
          # Since OpenAPI endpoint test succeeded, KEDA APIs are available - proceed with scan
          echo "✅ KEDA API endpoint confirmed accessible via HTTP - proceeding with scan"
          echo ""
          
          echo "🎯 CHECKPOINT 3: About to start RapiDAST scan"
          
          # Run RapiDAST scan with correct log level
          echo "Starting RapiDAST scan..."
          echo "🎯 CHECKPOINT 4: RapiDAST process starting..."
          
          python3 /opt/rapidast/rapidast.py --config /rapidast-config/config.yaml --log-level info 2>&1 || {
            echo "⚠️ RapiDAST scan completed with errors, but continuing..."
          }
          
          echo "🎯 CHECKPOINT 5: RapiDAST process finished"
          echo "✅ RapiDAST scan completed"
          echo "🎯 CHECKPOINT 6: About to examine results"
          
          echo "Results directory structure:"
          find /opt/rapidast/results -type f 2>/dev/null | head -20
          echo ""
          echo "Results summary:"
          ls -la /opt/rapidast/results/
          
          echo "🎯 CHECKPOINT 7: Results examination complete, proceeding to display step"
      - name: display-results
        image: quay.io/konflux-ci/konflux-test:latest
        volumeMounts:
        - name: rapidast-results
          mountPath: /results
        script: |
          #!/bin/bash
          set -euxo pipefail
          
          echo "🎯 CHECKPOINT 8: Display results step started"
          
          echo "🔍 RapiDAST + Trivy Scan Results Summary"
          echo "========================================"
          
          echo "All result files generated:"
          ls -la /results/
          echo ""
          
          # Debug: Check if results are in subdirectories
          echo "🔍 Checking for results in subdirectories:"
          find /results -type f -name "*.json" -o -name "*.html" -o -name "*.sarif" 2>/dev/null || echo "No result files found anywhere"
          echo ""
          
          # Debug: Check what's in the cma-operator directory
          if [ -d "/results/cma-operator" ]; then
            echo "📂 Contents of /results/cma-operator/:"
            find /results/cma-operator -type f 2>/dev/null | head -20
            echo ""
          fi
          
          # ZAP Results Display - Check multiple possible locations including deep dirs
          ZAP_RESULTS=""
          # First try to find traditional ZAP JSON reports
          for zap_file in /results/zap-baseline.json /results/*/zap-baseline.json /results/*/*/*.json /results/*/*/*/*.json; do
            if [ -f "$zap_file" ] && grep -q "issues" "$zap_file" 2>/dev/null; then
              ZAP_RESULTS="$zap_file"
              break
            fi
          done
          
          # If no traditional results, check for SARIF files (RapiDAST creates these)
          if [ -z "$ZAP_RESULTS" ]; then
            for sarif_file in /results/*/*/*.sarif /results/*/*/*/*.sarif; do
              if [ -f "$sarif_file" ] && grep -q "runs" "$sarif_file" 2>/dev/null; then
                ZAP_RESULTS="$sarif_file"
                break
              fi
            done
          fi
          
          if [ -n "$ZAP_RESULTS" ] && [ -f "$ZAP_RESULTS" ]; then
            echo "📊 ZAP API Security Scan Results:"
            echo "--------------------------------"
            echo "Results file: $(basename "$ZAP_RESULTS")"
            
            # Check if it's SARIF format or traditional ZAP JSON
            if echo "$ZAP_RESULTS" | grep -q "\.sarif$" || jq -e '.version' "$ZAP_RESULTS" >/dev/null 2>&1; then
              echo "📋 SARIF Format Results:"
              TOTAL_ZAP_ISSUES=$(jq -r '[.runs[]?.results[]?] | length' "$ZAP_RESULTS" 2>/dev/null || echo "0")
              echo "Total ZAP issues found: $TOTAL_ZAP_ISSUES"
              if [ "$TOTAL_ZAP_ISSUES" -gt "0" ]; then
                echo ""
                echo "Sample issues:"
                jq -r '.runs[]?.results[]? | "- \(.level // "INFO") \(.ruleId // "UNKNOWN"): \(.message.text // "No description")"' "$ZAP_RESULTS" | head -5
              else
                echo "✅ No security issues found in ZAP scan"
              fi
            else
              echo "📋 Traditional ZAP JSON Format:"
              jq -r '.issues[]? | "- \(.level) \(.name): \(.desc)"' "$ZAP_RESULTS" | head -10
              echo ""
              TOTAL_ZAP_ISSUES=$(jq -r '.issues | length' "$ZAP_RESULTS" 2>/dev/null || echo "0")
              echo "Total ZAP issues found: $TOTAL_ZAP_ISSUES"
            fi
            echo ""
          else
            echo "⚠️  No ZAP results found"
            echo "Searched for: zap JSON files, SARIF files in deep directories"
          fi
          
          # Trivy Results Display - Check multiple possible locations including deep dirs
          TRIVY_RESULTS=""
          # First check for JSON files
          for trivy_file in /results/trivy-k8s-misconfig.json /results/generic_trivy*.json /results/trivy*.json /results/*/trivy*.json /results/*/*/trivy*.json /results/*/*/*/trivy*.json; do
            if [ -f "$trivy_file" ]; then
              TRIVY_RESULTS="$trivy_file"
              break
            fi
          done
          
          # If no JSON files, check for text output files
          if [ -z "$TRIVY_RESULTS" ]; then
            for trivy_text in /results/*/*/generic_trivy/stdout-report.txt /results/*/*/*/generic_trivy/stdout-report.txt /results/*/*/generic_trivy/*.txt; do
              if [ -f "$trivy_text" ] && [ -s "$trivy_text" ]; then
                TRIVY_RESULTS="$trivy_text"
                break
              fi
            done
          fi
          
          if [ -n "$TRIVY_RESULTS" ] && [ -f "$TRIVY_RESULTS" ]; then
            echo "🛡️  Trivy Misconfiguration Scan Results:"
            echo "---------------------------------------"
            echo "Results file: $(basename "$TRIVY_RESULTS")"
            
            # Check if it's JSON format or text format
            if echo "$TRIVY_RESULTS" | grep -q "\.json$" && jq empty "$TRIVY_RESULTS" >/dev/null 2>&1; then
              # Handle JSON format (SARIF or Trivy JSON)
              if jq -e '.version == "2.1.0"' "$TRIVY_RESULTS" >/dev/null 2>&1; then
                echo "📋 SARIF Format Results:"
                TOTAL_TRIVY_ISSUES=$(jq -r '[.runs[].results[]] | length' "$TRIVY_RESULTS" 2>/dev/null || echo "0")
                echo "Total Trivy issues found: $TOTAL_TRIVY_ISSUES"
                if [ "$TOTAL_TRIVY_ISSUES" -gt "0" ]; then
                  echo ""
                  echo "Sample issues:"
                  jq -r '.runs[].results[] | "- \(.level // "UNKNOWN") \(.ruleId): \(.message.text)"' "$TRIVY_RESULTS" | head -5
                fi
              else
                echo "📋 Trivy JSON Format Results:"
                TOTAL_TRIVY_ISSUES=$(jq -r '[.Results[]?.Misconfigurations[]?] | length' "$TRIVY_RESULTS" 2>/dev/null || echo "0")
                echo "Total Trivy misconfigurations found: $TOTAL_TRIVY_ISSUES"
                if [ "$TOTAL_TRIVY_ISSUES" -gt "0" ]; then
                  echo ""
                  echo "Sample misconfigurations:"
                  jq -r '.Results[]?.Misconfigurations[]? | "- \(.Severity) \(.ID): \(.Title)"' "$TRIVY_RESULTS" | head -5
                fi
              fi
            else
              # Handle text format
              echo "📋 Trivy Text Output:"
              echo ""
              echo "Content preview:"
              head -20 "$TRIVY_RESULTS" | grep -v "^$" | head -10
              
              # Try to count issues in text format
              ISSUE_COUNT=$(grep -c -E "(HIGH|CRITICAL|MEDIUM)" "$TRIVY_RESULTS" 2>/dev/null || echo "0")
              echo ""
              echo "Potential issues found: $ISSUE_COUNT"
            fi
            echo ""
          else
            echo "⚠️  No Trivy results found"
            echo "Searched for: JSON files and text outputs in deep directories"
            echo "Files found in results directory:"
            find /results -name "*trivy*" -o -name "*generic*" 2>/dev/null || echo "No trivy/generic files found"
            echo ""
          fi
          
          # Report Files Summary
          echo "📄 Generated Report Files:"
          echo "-------------------------"
          for report_type in html sarif json; do
            report_files=$(find /results -name "*.$report_type" 2>/dev/null || true)
            if [ -n "$report_files" ]; then
              echo "📄 $report_type reports:"
              echo "$report_files" | sed 's|/results/||g' | sed 's/^/  - /'
            else
              echo "📄 No $report_type reports found"
            fi
          done
          
          echo ""
          echo "✅ Scan Results Summary Complete"
          echo ""
          echo ""
          echo "===================================================================================="
          echo "🔍 DETAILED SECURITY SCAN EVIDENCE FOR INFORMATION SECURITY TEAM"
          echo "===================================================================================="
          echo ""
          
          # Full SARIF Results Dump
          if [ -n "$ZAP_RESULTS" ] && [ -f "$ZAP_RESULTS" ]; then
            echo "📊 FULL ZAP SECURITY SCAN RESULTS (SARIF FORMAT):"
            echo "=================================================================="
            echo "File: $ZAP_RESULTS"
            echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo ""
            cat "$ZAP_RESULTS"
            echo ""
            echo "=================================================================="
            echo ""
          fi
          
          # Full Trivy Results Dump  
          if [ -n "$TRIVY_RESULTS" ] && [ -f "$TRIVY_RESULTS" ]; then
            echo "🛡️  FULL TRIVY MISCONFIGURATION SCAN RESULTS:"
            echo "============================================================="
            echo "File: $TRIVY_RESULTS"
            echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo ""
            cat "$TRIVY_RESULTS"
            echo ""
            echo "============================================================="
            echo ""
          fi
          
          # Dump any additional JSON reports
          echo "📄 ALL ADDITIONAL SCAN REPORT FILES:"
          echo "===================================="
          find /results -name "*.json" -o -name "*.html" -o -name "*.sarif" | while read report_file; do
            if [ -f "$report_file" ] && [ "$report_file" != "$ZAP_RESULTS" ] && [ "$report_file" != "$TRIVY_RESULTS" ]; then
              echo ""
              echo "📄 Report File: $report_file"
              echo "Size: $(du -h "$report_file" | cut -f1)"
              echo "----------------------------------------"
              if echo "$report_file" | grep -q "\.html$"; then
                echo "[HTML REPORT - Content truncated for log readability]"
                echo "File available in pipeline artifacts"
              else
                cat "$report_file"
              fi
              echo "----------------------------------------"
            fi
          done
          echo ""
          
          # Configuration Evidence
          echo "⚙️  SCAN CONFIGURATION EVIDENCE:"
          echo "================================"
          if [ -f "/results/cma-operator/*/config.yaml" ]; then
            echo ""
            echo "📋 RapiDAST Configuration Used:"
            find /results -name "config.yaml" | head -1 | xargs cat
            echo ""
          fi
          
          echo "===================================================================================="
          echo "🎯 END OF DETAILED SECURITY SCAN EVIDENCE"  
          echo "===================================================================================="
          echo ""
          echo "ℹ️  SUMMARY FOR INFORMATION SECURITY:"
          echo "- This scan tested the Custom Metrics Autoscaler operator's API endpoints"
          echo "- ZAP performed dynamic application security testing on OpenAPI endpoints"  
          echo "- Trivy performed Kubernetes misconfiguration analysis"
          echo "- All evidence above can be saved from pipeline logs for compliance documentation"
          echo "- Scan timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
    params:
    - name: namespace
      value: "$(params.NAMESPACE)"

  # Package and push scan results as a container image for security evidence  
  - name: package-scan-evidence
    runAfter:
    - rapidast-api-scan
    taskSpec:
      params:
      - name: SNAPSHOT
        type: string
      - name: namespace
        type: string
      volumes:
      - name: credentials
        emptyDir: {}
      - name: rapidast-results
        emptyDir: {}
      - name: results-evidence
        emptyDir: {}
      steps:
      - name: get-kubeconfig
        ref:
          resolver: git
          params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
        params:
        - name: eaasSpaceSecretRef
          value: $(tasks.provision-eaas-space.results.secretRef)
        - name: clusterName
          value: "$(tasks.provision-cluster.results.clusterName)"
        - name: credentials
          value: credentials
      - name: create-evidence-package
        image: quay.io/konflux-ci/konflux-test:latest
        env:
        - name: NAMESPACE
          value: "$(params.namespace)"
        - name: SNAPSHOT
          value: "$(params.SNAPSHOT)"
        volumeMounts:
        - name: results-evidence
          mountPath: /evidence
        script: |
          #!/bin/bash
          set -euxo pipefail
          
          echo "📦 Creating security evidence package..."
          
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          PIPELINE_RUN="${CONTEXT_PIPELINE_RUN_NAME:-unknown}"
          
          # Extract component info from snapshot
          COMPONENT_NAME=$(echo "$SNAPSHOT" | jq -r '(.spec.components[]? // .components[]?) | select(.name | test(".*bundle.*")) | .name' | head -1)
          COMPONENT_IMAGE=$(echo "$SNAPSHOT" | jq -r '(.spec.components[]? // .components[]?) | select(.name | test(".*bundle.*")) | .containerImage' | head -1)
          
          # Create evidence summary
          cat > /evidence/SECURITY_SCAN_SUMMARY.md << EOF
          # Custom Metrics Autoscaler Operator - DAST Security Scan Evidence
          
          ## Scan Information
          - **Component**: $COMPONENT_NAME  
          - **Component Image**: $COMPONENT_IMAGE
          - **Scan Type**: Dynamic Application Security Testing (DAST)
          - **Tools Used**: OWASP ZAP + Trivy
          - **Scan Date**: $TIMESTAMP
          - **Pipeline Run**: $PIPELINE_RUN
          - **Target Namespace**: $NAMESPACE
          
          ## Evidence Access Instructions
          
          ### Option 1: Pipeline Logs (Comprehensive Evidence)
          The complete scan evidence is available in the Konflux pipeline logs:
          1. Navigate to your Konflux pipeline run: $PIPELINE_RUN
          2. View the "rapidast-api-scan" task logs
          3. Scroll to the "DETAILED SECURITY SCAN EVIDENCE FOR INFORMATION SECURITY TEAM" section
          4. Save the entire log output as evidence
          
          ### Option 2: Container Evidence Package  
          This container provides a structured evidence package:
          \`\`\`bash
          # Pull this evidence container
          podman pull quay.io/jkyros/custom-metrics-autoscaler-konflux-operator-bundle:dast-evidence-\$(date +%Y%m%d)
          
          # View this summary
          podman run --rm <image>
          
          # Extract evidence files (if any were packaged)
          podman run --rm -v \$(pwd)/evidence:/output <image> cp -r /evidence/* /output/
          \`\`\`
          
          ## Security Assessment Summary
          - **ZAP API Security Scan**: Tested KEDA API endpoints for security vulnerabilities
          - **Trivy Misconfiguration Scan**: Analyzed Kubernetes resources for misconfigurations
          - **Coverage**: OpenAPI endpoints in openshift-keda namespace
          - **Authentication**: Service account with cluster-admin permissions (scan-only)
          
          ## Compliance Notes
          - Scan executed in ephemeral test environment (no production impact)
          - All scan evidence preserved in pipeline logs
          - Results format: SARIF (structured), JSON (machine-readable), Text (human-readable)
          - No sensitive data exposed in scan results
          
          ## Contact
          For questions about this security scan or evidence:
          - Pipeline: Konflux DAST Integration Pipeline
          - Component Owner: Custom Metrics Autoscaler Team
          - Security Scan Framework: RapiDAST (Red Hat Product Security)
          EOF
          
          # Create simple Dockerfile
          cat > /evidence/Dockerfile << 'EOF'
          FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
          
          # Copy evidence summary
          COPY SECURITY_SCAN_SUMMARY.md /evidence/
          COPY . /evidence/
          
          # Set working directory
          WORKDIR /evidence
          
          # Labels for traceability
          LABEL description="DAST Security Scan Evidence Container"
          LABEL scan.component="custom-metrics-autoscaler-operator"
          LABEL scan.tools="rapidast-zap-trivy"
          LABEL maintainer="konflux-dast-pipeline"
          
          # Default shows the summary
          CMD ["cat", "/evidence/SECURITY_SCAN_SUMMARY.md"]
          EOF
          
          echo "✅ Evidence package created successfully"
          
      - name: build-and-push-evidence
        image: quay.io/buildah/stable:v1.37
        volumeMounts:
        - name: results-evidence
          mountPath: /evidence
        env:
        - name: SNAPSHOT
          value: "$(params.SNAPSHOT)"
        script: |
          #!/bin/bash
          set -euxo pipefail
          
          echo "🏗️ Building security evidence container..."
          
          # Generate unique tag with timestamp  
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          IMAGE_NAME="quay.io/jkyros/custom-metrics-autoscaler-konflux-operator-bundle"
          EVIDENCE_TAG="dast-evidence-${TIMESTAMP}"
          FULL_IMAGE="${IMAGE_NAME}:${EVIDENCE_TAG}"
          
          echo "Building image: $FULL_IMAGE"
          
          cd /evidence
          
          # Build the evidence container with chroot isolation (avoids UID mapping issues)
          buildah build --isolation=chroot -t "$FULL_IMAGE" -f Dockerfile .
          
          # Push to registry (uses existing QUAY push secret from Konflux)
          echo "🚀 Pushing security evidence to registry..."
          buildah push "$FULL_IMAGE"
          
          echo "✅ Security evidence container pushed successfully!"
          echo ""
          echo "🎯 SECURITY TEAM ACCESS INSTRUCTIONS:"
          echo "======================================"
          echo "Pull the evidence container:"
          echo "  podman pull $FULL_IMAGE"
          echo ""
          echo "View evidence summary:"
          echo "  podman run --rm $FULL_IMAGE"
          echo ""  
          echo "Extract evidence files:"
          echo "  podman run --rm -v \$(pwd)/scan-evidence:/output $FULL_IMAGE cp -r /evidence/* /output/"
          echo ""
          echo "Interactive examination:"
          echo "  podman run --rm -it $FULL_IMAGE bash"
          echo "======================================"
    params:
    - name: SNAPSHOT
      value: "$(params.SNAPSHOT)"
    - name: namespace
      value: "$(params.NAMESPACE)"
